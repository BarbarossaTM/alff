#!/usr/bin/perl -w
#
# ALFF_FUNCTION_DESC Setup plugin.d initially with standard plugins
#
# setupPlugins
#
# Maximilian Wilhelm <max@rfc2324.org>
#  -- Thu, 23 Nov 2006 02:11:39 +0100
#

use strict;
use Alff::Config;
use XML::Simple;

# Load the alff.conf
my $alff_config = Alff::Config->new();
my $config_space = $alff_config->getConfigSpace();
my $config_dir = $alff_config->getConfigDir();

print "Setting up config space \"$config_space\"";
sleep 3;

my $plugin_d = "$config_dir/plugin.d";
my $plugin_d_defaults_file = "/usr/share/alff/plugins/plugin.d.defaults";
my $plugin_d_plugindir = "/usr/share/alff/plugins/plugin.d/";

# Load the plugin.d defaults configuration
if ( ! -f $plugin_d_defaults_file ) {
	die( "ERROR: Configfile \"$plugin_d_defaults_file\" does not exist.\n" );
}

# Load and parse the configuration
my $plugin_d_defaults = XML::Simple::XMLin( $plugin_d_defaults_file, NormalizeSpace => 2 )
	or die( "ERROR: Could not load configuration from \"$plugin_d_defaults_file\".\n" );



# Does ${PLUGIN_D} exists?
if ( ! -d $plugin_d ) {
	die( "ERROR: plugin.d \"${plugin_d}\" does not exist.!\nDid you create this config space allready?.\n" );
}

# Did the user do anything therein?
opendir( PLUGIN_D, $plugin_d )
	or die( "ERROR: Could not read directory contents of \"$plugin_d\"\n" );

if ( grep { ! m/^README$/ and -f "$plugin_d/$_" } readdir ( PLUGIN_D ) ) {
	die( "ERROR: It seems that you have setup plugin.d allready.\nI will not touch it.\n" );
}

close( PLUGIN_D );


# Check if $PLUGIN_D_PLUGINDIR exists
if ( ! -d $plugin_d_plugindir ) {
	die( "ERROR: No plugins found on this system at \"$plugin_d_plugindir\".\n" );
}

# Check if the plugin_d_defaults_file exists
if ( ! -f $plugin_d_defaults_file ) {
	die( "ERROR: plugin.d defaults file \"$plugin_d_defaults_file\" does not exist.\n" );
}


# OK let´s go
my $fw_type = $alff_config->getOption( 'fw_type' );

foreach my $plugin_name (  keys %{$plugin_d_defaults->{$fw_type}->{plugin}} ) {
	my $plugin_id = $plugin_d_defaults->{$fw_type}->{plugin}->{$plugin_name}->{id};
	# Get the plugin options if any, use "" otherwise.
	my $options = $plugin_d_defaults->{$fw_type}->{plugin}->{$plugin_name}->{options} ? $plugin_d_defaults->{$fw_type}->{plugin}->{$plugin_name}->{options} : "";

	my $plugin_path = "$plugin_d_plugindir/$plugin_name";
	my $plugin_d_entry = "$plugin_d/${plugin_id}${plugin_name}${options}";

	print "Adding $plugin_d_entry ...\n";
	symlink( $plugin_path, $plugin_d_entry )
		or die( "ERROR: Could not create symlink from \"$plugin_path\" to \"$plugin_d_entry\"\n" );
}

# vim:foldmethod=marker
