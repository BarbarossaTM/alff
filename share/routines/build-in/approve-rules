#!/usr/bin/perl -w
#
# alff-approve-rules
#
# Wait for the new ruleset to be loaded and try to delete the 
# 'current_rules_dont_work' token on the firewall machine.
#
# Maximilian Wilhelm <max@rfc2324.org>
#  -- Mon, 14 Aug 2006 15:46:03 +0200

use strict;
use Alff::Config;
use Net::CIDR;

# Where to find things on the alff-aggent
my $alff_rules_dir = "/var/cache/alff/rules";
my $rules_loading_token = "${alff_rules_dir}/.loading_new_rules";
my $current_rules_dont_work_token = "${alff_rules_dir}/.current_rules_dont_work";

# Get machine_id from command line
my $machine_id = $ARGV[0];

# Check for valid machine_id
if ( ! defined $machine_id ) {	
	print STDERR "Usage: alff approve-rules machine-ID\n";
	exit 1;
}

# Parse configuration and get/validate machine data #{{{

# Do not provide a config file here to let the ${ALFF_CONFIG_SPACE and 
# environment variables do the trick for us.
my $config = Alff::Config->new();

if ( ! $config->isValidMachineID( $machine_id ) ) {
	print STDERR "Error: Invalid machine ID $machine_id.\n";
	exit 1;
}

my $machine_hostname = $config->getMachineHostname( $machine_id );
my $machine_ip = $config->getMachineIP( $machine_id );

if ( ! $machine_ip ) {
	print STDERR "Error: Could not get IP address for machine $machine_id\n";
	exit 1;
}

if ( ! Net::CIDR::cidrvalidate( $machine_ip ) ) {
	print STDERR "Error: Invalid IP address for machine $machine_id.\n";
	exit 1;
}
#}}}

print "Approving rules on ${machine_id}: ";
my $first_connect = system( "ssh -x -l root $machine_ip \"while [ -f \"${rules_loading_token}\" ]; do echo -n '.'; sleep 3; done; echo -n ' '; exit;\"" );
if ( $first_connect ) {
	print STDERR "Error: Could not connect to ${machine_id}!\n";
	exit 1;
}

my $delete_token_status = system( "ssh -x -l root $machine_ip \"rm \"${current_rules_dont_work_token}\" \"" );
if ( $delete_token_status ) {
	print STDERR "Error: Could not approve rules on ${machine_id}!\n";
	exit 1;
}

# If everything succeded...
print "done.\n";

exit 0;
# vim:foldmethod=marker
