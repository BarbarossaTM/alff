#!/usr/bin/env sh
#
# alff routines
#
# Maximilian Wilhelm <max@rfc2324.org>
#  -- Fri, 28 Apr 2006 19:52:22 +0200
#

##
function configureFirewallNetworkOptions() { # {{{

	# Get fw_type configuration option
	FW_TYPE=`alff getOption -nocheck fw_type`

	echo  " * Configuring networking feature for ${FW_TYPE} mode..."

	case "${FW_TYPE}" in 
		bridge)
			# If we are running as a bridge, 
			#- enable hooks only for used filter features
			cat <<- EOCONF >&3
			echo 0 > /proc/sys/net/bridge/bridge-nf-call-arptables
			echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
			echo 0 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
			echo 1 > /proc/sys/net/bridge/bridge-nf-filter-vlan-tagged
			
			EOCONF

			echo "" >&2
			echo "" >&2
			echo "WARNING: You are using bridging mode firewall..." >&2
			echo "This part of alff is not tested very well anymore!" >&2
			echo ""
			sleep 3
			;;

		router)
			cat <<- EOCONF >&3
			echo 1 > /proc/sys/net/ipv4/ip_forward
			
			EOCONF
			;;

	esac
}
# }}}

##
# Check if there are hooks of the given type
function hooksExist () { #{{{
	local HOOK_TYPE="${1}"

	case "${HOOK_TYPE}" in
		pregenerate)		;;
		postgenerate)		;;
		prepush)		;;
		postpush)		;;
		*)
			echo "Error: Invalid hooktype \"${HOOK_TYPE}\"" >&2
			return 1
			;;
	esac

	if [ -z "${CONFIG_DIR}" ]; then
		CONFIG_DIR="/etc/alff"
	fi

	HOOK_DIR="${CONFIG_DIR}/hooks/${HOOK_TYPE}.d"
	if [ ! -d "${HOOK_DIR}" ]; then
		return 1
	fi

	if ! find "${HOOK_DIR}" \( -type f -or -type l \) | while read hook; do
		if [ -x "${hook}" ]; then
			exit 1
		fi
	done; then
		return 0
	else
		return 1
	fi
} #}}}

##
# execute Hooks of given type
function executeHooks() { #{{{
	local HOOK_TYPE="${1}"

	case "${HOOK_TYPE}" in
		pregenerate)		;;
		postgenerate)		;;
		prepush)		;;
		postpush)		;;
		*)
			echo "Error: Invalid hooktype \"${HOOK_TYPE}\"" >&2
			return 1
			;;
	esac

	if [ -z "${CONFIG_DIR}"  ]; then
		CONFIG_DIR="/etc/alff"
	fi
	HOOK_DIR="${CONFIG_DIR}/hooks/${HOOK_TYPE}.d"

	if hooksExist "${HOOK_TYPE}"; then
		echo "Executing ${HOOK_TYPE} hooks..."
		find "${HOOK_DIR}" \( -type f -or -type l \) -exec basename {} \; | sort -n | while read hook; do
			if [ -x "${HOOK_DIR}/${hook}" ]; then
				if ! sh -c "${HOOK_DIR}/${hook}"; then
					echo "Error: ${HOOK_TYPE} hook \"${hook}\" exited with status != 0" >&2
					return 1
				fi
			fi
		done
	else
		return 0 
	fi
} #}}}

# vim:foldmethod=marker
