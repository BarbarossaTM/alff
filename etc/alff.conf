<alff_config>
	<!-- Global options for alff //-->
	<options>
		<!-- Specify the type of this firewall.
		 This system can by run on a bridging firewall which is bridging a trunk
		 with 802.1Q-Vlans (e.g. when using a Cisco[tm] environment) or as a routing firewall.
		 The keywords are "bridge" and "router".
		 The bridge mode is not really tested and working for now, be warned. //-->
		<fw_type> router </fw_type>

		<!-- Which types of ICMP traffic should be allowed?
		 This option controls if/which ICMP packets will be able to pass the firewall.
		 Possible values are:
		  + all: Allow all icmp traffic
		  + basic: Allow echo-{request,reply} destination-unreachable/* source-squench time-exceeded/* parameter-problem/* (0,3,4,8,11,12)
		  + none: Don´t allow any icmp traffic
		 Be warned: You will get into trouble if you block all ICMP traffic...
		 The default value is 'all'. //-->
		<allow_icmp> all </allow_icmp>

		<!-- Allow udp traceroute in general?
		 Allow traceroute (udp packets to ports 33434 - 33523) to pass the firewall.
		 This does not have any influence on traceroute using ICMP packets.
		 The default is yes. //-->
		<allow_traceroute_udp> yes </allow_traceroute_udp>

		<!-- Allow multicast connections?
		 Decide if you want to allow multicast connections to be allowed.
		 Beware that you have to set up your firewall to be able to do so by your own,
		 if your firewall is a router. In bridge mode it does just work[tm].
		 The default is yes. //-->
		<allow_multicast> yes </allow_multicast>

		<!-- Remove unreferenced chains?
		 Should alff remove/skip user defined chains which are not referenced at all
		 when computing the final ruleset even if it does contain (unreachable) rules?
		 The default is 'no'.
		//-->
		<suppress_unreferenced_chains> no </suppress_unreferenced_chains>

		<!-- Remove empty chains?
		 Should alff remove user defined chains which do not contain any rules when
		 computing the final rules even if they are referenced by other chains?
		 The default is 'no'.
		//-->
		<suppress_empty_chains> no </suppress_empty_chains>


		<!-- Your DHCP server(s)
		Provide a list of the IPs of your DHCP server in your network, one per row.
		Connections from udp port 67 to $server:68/udp and vice versa will be allowed.
		//-->
<!--	    <dhcp_server> 192.168.42.1 </dhcp_server> //-->
<!--	    <dhcp_server> fe80::42:1 </dhcp_server> //-->

		<!-- Support IPv6 Nat
		 Should alff generate a NAT table for the IPv6 ruleset even if it does not
		 contain any rules? These rulesets will fail to load on machines running
		 Kernel versions older than 3.7. So use with care ;)
		 The default is 'no'.
		//-->
		<support_ipv6_nat> no </support_ipv6_nat>
	</options>


	<!-- Plugin options //-->
	<plugins>
		<!-- Configuration options for the 'classifyInterVlanTraffic' plugin.
		     Only valid if the plugin is used //-->
		<classifyInterVlanTraffic>
			<!-- The default policy put into chains without any configuration in rules.d
			 Valid values are ACCEPT, DROP, REJECT, LOG or a self defined chain, which has to be created before
			 classifyInterVlanTraffic is launched.
			 The default is 'REJECT'.
			//-->
			<default_chain_target> REJECT </default_chain_target>

			<!-- Should classifyInterVlanTraffic remove/skip chains which do *not* have any special rules?
			 The plugin will check each chain it is about to create if there exists any configuration for
			 it or if the default_chain_policy would be applied to the chain. If the latter one is the case,
			 it will just skip this chain to simplify your ruleset and speed up rule processing.
			 The default is 'no'.
			//-->
			<remove_empty_chains> yes </remove_empty_chains>

			<!-- Should classifyInterVlanTraffic create chains like mynet_to_mynet?
			 If you say 'yes' the plugin will create chains to handle traffic from a network into the same
			 network, like 'myNet_to_myNet'. You may want this if your firewall is a bridge or you have some
			 "interesting" routing configured in your network.
			 The default is 'no'.
			//-->
			<force_x_to_x_chains> no </force_x_to_x_chains>
		</classifyInterVlanTraffic>


		<!-- Configuration options for the 'createChainTcpScanHandling' plugin.
		     Only valid if the plugin is used //-->
		<createChainTcpScanHandling>
		    <!-- Should TCP-Scans be logged to syslog? By default this value is set to yes -->
		    <log_scans> yes </log_scans>

		    <!-- Should we drop any detected scans? By default this value is set to yes -->
		    <drop_scans> yes </drop_scans>

		    <!-- Should scan detection be done for packets desired for the firewall itself? -->
		    <hook_in_input> yes </hook_in_input>

		    <!-- Should scan detection be done for packets trespassing the firewall? -->
		    <hook_in_forward> yes </hook_in_forward>
		</createChainTcpScanHandling>


		<!-- Configuration options for the 'create_traffic_logging_rules' plugin.
		     Only valid if the plugin is used //-->
		<create_traffic_logging_rules>
			<!-- Should traffic counting rules be inserted into the INPUT chain?
			 If set to 'yes', this plugin will insert two rules for each found interface
			 into the INPUT chain counting inbound and outbound traffic.
			 These rules don't have a target and won't influence the packets fate.
			 The default is 'yes'.
			//-->
			<log_local_traffic> yes </log_local_traffic>

			<!-- Should traffic counting rules be inserted into the FORWARD chain?
			 If set to 'yes', this plugin will insert two rules for each found interface
			 into the FORWARD chain counting inbound and outbound traffic.
			 These rules don't have a target and won't influence the packets fate.
			 The default is 'yes'.
			//-->
			<log_forwarded_traffic> yes </log_forwarded_traffic>
		</create_traffic_logging_rules>
	</plugins>


	<!--
	  The networks alff should know of..

	  Each network..
	   * must have an unique 'id' attribute
	   * may have a description ('desc')
	   * should have a set of 'prefix'es (either IPv4 or IPv6)
	   * may belong to one or more 'security_class':
	     A security class basicly is an ASCII tag of your choice glued to the network to group
	     and identify a set of networks/prefixes later to allow traffic from these networks to
	     a specific service etc.

	     There are two predefined security classes which may be specifed as a separate
	     attribute for compatibility reasons:
	     + 'filtered' meaining this network is behind of one of our packet filters
	     + 'trusted' meaing this network is somewhat trusted (your definition applies)

	//-->

	<!-- external networks //-->
<!--
	<network>
		<id> ISP  </id>
		<desc> my ISP network </desc>
		<prefix> 123.234.42.0/22 </prefix>
		<prefix> 20c0:ffee:babe:2342::/64 </prefix>
		<security_class> upstream </security_class>
	</network>
//-->

  <!-- internal networks //-->
<!--
	<network>
		<id> 42 </id>
		<prefix> 192.168.42.0/24 </prefix>
		<desc> my Home network </desc>
		<filtered> yes </filtered>
		<trusted> yes </trusted>
		<security_class> home </security_class>
	</network>
//-->


	<!--
	  The sites your packet filters are located.

	  Each site has a set to machines which we should generate a ruleset for
	  and push and load it onto these machines.

	  Each site also must have an interface_map which contains the mapping
	  of previously defined networks (see above) to interface names found
	  on the machines specified here. Beware that all interface names have
	  to be the same on al machines for this to work!
	//-->

	<sites>
		<!--
		<site id="exmaple">
			<machines>
				<machine id="fw1">
					<hostname> fw1.example.com </hostname>
					<ip> 192.168.1.2 </ip>
					<ip6> 2001:db8::1:2 </ip6>
					<desc> My main firewall </desc>
				</machine>

				<machine id="firewall2">
					<hostname> firewall2.example.com </hostname>
					<ip> 192.168.1.3 </ip>
					<ip6> 2001:db8::1:3 </ip6>
					<desc> My backup firewall </desc>
				</machine>
			</machines>

			<interface_map>
				<network id="ISP">
					<interface>ppp0</interface>
					<default/>
				</network>

				<network id="42">
					<interface>eth0</interface>
				</network>
			</interface_map>
		</site>
		//-->
	</sites>


</alff_config>
<!-- vim:ft=xml:ts=4
 //-->
