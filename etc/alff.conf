<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE alff_config SYSTEM "/usr/share/alff/alff_config.dtd">

<alff_config>
	<!-- Global options for alff //-->
	<options>
		<!-- Specify the type of this firewall.
		 This system can by run on a bridging firewall which is bridging a trunk 
		 with 802.1Q-Vlans (e.g. when using a Cisco[tm] environment) or as a routing firewall.
		 The keywords are "bridge" and "router".
		 The bridge mode is not really tested and working for now, be warned. //-->
		<fw_type> router </fw_type>

		<!-- Which types of ICMP traffic should be allowed?
		 This option controls if/which ICMP packets will be able to pass the firewall.
		 Possible values are:
		  + all: Allow all icmp traffic
		  + basic: Allow echo-{request,reply} destination-unreachable/* source-squench time-exceeded/* parameter-problem/* (0,3,4,8,11,12)
		  + none: Don´t allow any icmp traffic
		 Be warned: You will get into trouble if you block all ICMP traffic...
		 The default value is 'all'. //-->
		<allow_icmp> all </allow_icmp>

		<!-- Allow udp traceroute in general?
		 Allow traceroute (udp packets to ports 33434 - 33523) to pass the firewall.
		 This does not have any influence on traceroute using ICMP packets.
		 The default is yes. //-->
	    <allow_traceroute_udp> yes </allow_traceroute_udp>

		<!-- Your DHCP server(s)
		 Provice a space separated list of the IPs of your DHCP server in your network.
		 Connections from udp port 67 to $server:68/udp and vice versa will be allowed.
		 //-->
<!--	    <dhcp_server> 192.168.42.1  </dhcp_server> //-->
  </options>

	<plugins>
		<classifyInterVlanTraffic>
			<!-- The default policy put into chains without any configuration in rules.d
			 Valid values are ACCEPT, DROP, REJECT, LOG or a self defined chain, which has to be created before
			 classifyInterVlanTraffic is launched.
			 The default is 'REJECT'.
			//-->
			<default_chain_target> REJECT </default_chain_target>

			<!-- Should classifyInterVlanTraffic remove/skip chains which do *not* have any special rules?
			 The plugin will check each chain it is about to create if there exists any configuration for
			 it or if the default_chain_policy would be applied to the chain. If the latter one is the case,
			 it will just skip this chain to simplify your ruleset and speed up rule processing.
			 The default is 'no'.
			//-->
			<remove_empty_chains> no </remove_empty_chains>
		</classifyInterVlanTraffic>
	</plugins>

  <!--
	 The Networks/Vlans alff should know of.. 
  //-->

	<!-- external networks //-->
<!--	<vlan>
		<id> ISP  </id>
		<desc> my ISP network </desc>
		<network> 123.234.42.0/22 </network>
		<network> 123.234.112.0/20 </network>
		<interface> ppp0 </interface>
	</vlan>
//-->

  <!-- internal networks //--> 
<!--	<vlan>
		<id> 42 </id>
		<network> 192.168.42.0/24 </network>
		<desc> my Home network </desc>
		<interface> eth0 </interface>
		<filtered> yes </filtered>
		<trusted> yes </trusted>
	</vlan>
//-->

<!--	<vlan>
		<id> 23 </id>
		<network> 192.168.23.0/23 </network>
		<desc> my hacking lab network </desc>
		<filtered> yes </filtered>
	</vlan>
//-->

<!--
	<machine id="fw1">
		<hostname> fw1.example.com </hostname>
		<ip> 192.168.1.2 </ip>
		<desc> My main firewall </desc>
	</machine>

	<machine id="firewall2">
		<hostname> firewall2.example.com </hostname>
		<ip> 192.168.1.3 </ip>
		<desc> My backup firewall </desc>
	</machine>
//-->

</alff_config>
<!-- vim:ft=xml:ts=4
 //-->
